version: '3.9'
x-airflow-common: &airflow-common
  image: ${DOCKER_REGISTRY:-tristandatascience}/${DOCKER_REPOSITORY:-aussie_weather_flow}:airflow-base-${IMAGE_TAG:-0.2}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW_CONN_WEATHER_DATA_POSTGRES: postgresql+psycopg2://airflow:airflow@postgres:5432/weather_data
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__ENABLE_API: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_HOME: /opt/airflow
    PYTHONPATH: "$$PYTHONPATH:/opt/airflow/plugins"
    MLFLOW_TRACKING_URI: "http://mlflow-webserver:5000"
    AIRFLOW_API_URL: 'http://airflow-webserver:8080/api/v1'
    GIT_PYTHON_REFRESH: "quiet"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data:/data
    - ./models:/opt/airflow/models
    - ./data:/opt/airflow/data
    - ./temp:/opt/airflow/temp
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
services:
  postgres-mlflow:
    image: postgres:13
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    volumes:
      - postgres-db-volume-mlflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "mlflow"]
      interval: 5s
      retries: 5
    restart: always
  s3-artifact-storage:
    image: minio/minio
    volumes:
      - mlflow-data:/data
    environment: &env-mlflow-s3
      MINIO_ROOT_USER: mlflow_access
      MINIO_ROOT_PASSWORD: mlflow_secret
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    healthcheck:
      test: ["CMD", "/usr/bin/mc", "ready", "local"]
      interval: 5s
      retries: 5
    restart: always
  mlflow-init:
    image: minio/mc
    depends_on:
      s3-artifact-storage:
        condition: service_healthy
    environment:
      <<: *env-mlflow-s3
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO...';
      sleep 5;
      /usr/bin/mc alias set myminio http://s3-artifact-storage:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb myminio/data --ignore-existing;
      /usr/bin/mc anonymous set download myminio/data;
      echo 'Bucket created and configured successfully';
      exit 0;
      "

  mlflow-webserver:
    image: ${DOCKER_REGISTRY:-tristandatascience}/${DOCKER_REPOSITORY:-aussie_weather_flow}:mlflow-webserver-${IMAGE_TAG:-0.2}
    ports:
      - 5000:5000
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://s3-artifact-storage:9000
      MLFLOW_S3_IGNORE_TLS: "true"
      AWS_ACCESS_KEY_ID: "mlflow_access"
      AWS_SECRET_ACCESS_KEY: "mlflow_secret"
    command: mlflow server --backend-store-uri postgresql://mlflow:mlflow@postgres-mlflow/mlflow --artifacts-destination s3://data -h 0.0.0.0 -p 5000 --serve-artifacts
    depends_on:
      - postgres-mlflow
      - s3-artifact-storage
      - mlflow-init
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./init-weather-db.sh:/docker-entrypoint-initdb.d/init-weather-db.sh
      - postgres-db-volume-airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
  airflow-webserver:
    !!merge <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      !!merge <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-scheduler:
    !!merge <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      !!merge <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-worker:
    !!merge <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      !!merge <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      !!merge <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-triggerer:
    !!merge <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ['CMD-SHELL', 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      !!merge <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-init:
    !!merge <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          # Version plus robuste qui gère différents formats
          local version=$$1
          # Nettoie la version (enlève les caractères non numériques sauf les points)
          version=$$(echo "$$version" | sed 's/[^0-9.]//g')
          # Divise par les points et formate
          echo "$$version" | awk -F. '{ printf("%04d%04d%04d%04d\n", $$1, $$2, $$3, $$4); }'
        }
        
        echo "Checking Airflow version..."
        airflow_version=$$(gosu airflow airflow version 2>/dev/null || echo "2.5.0")
        echo "Detected Airflow version: $$airflow_version"
        
        airflow_version_comparable=$$(ver $$airflow_version)
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $$min_airflow_version)
        
        echo "Comparable versions: current=$$airflow_version_comparable, min=$$min_airflow_version_comparable"
        
        # Comparaison numérique plus sûre
        if [ "$$airflow_version_comparable" -lt "$$min_airflow_version_comparable" ] 2>/dev/null; then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $$airflow_version!\e[0m"
          echo "The minimum Airflow version supported: $$min_airflow_version. Only use this or higher!"
          echo
          exit 1
        fi
        
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $$cpus_available"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $$warning_resources == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/mlflow-data /sources/data/ /sources/data/raw /sources/data/digest  /sources/data/pandas
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,mlflow-data}
        exec /entrypoint airflow version
    environment:
      !!merge <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: '0:0'
    volumes:
      - .:/sources
  fastapi:
    image: ${DOCKER_REGISTRY:-tristandatascience}/${DOCKER_REPOSITORY:-aussie_weather_flow}:fastapi-${IMAGE_TAG:-0.2}
    ports:
      - '8000:8000'
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./api:/app
      - ./users:/app/users
      - ./plugins/weather_utils:/app/weather_utils
      - ./temp:/app/temp
    env_file:
      - api.env
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      - airflow-webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  prometheus:
    image: prom/prometheus:v2.37.0
    volumes:
      - ./prometheus:/etc/prometheus:rslave
      - prometheus-data:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    depends_on:
      - airflow-webserver
      - airflow-scheduler
      - airflow-worker
      - mlflow-webserver
      - postgres
      - redis
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-S', 'http://localhost:9090/-/healthy']
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always
    user: 'nobody'
    networks:
      - default
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro,rslave
      - /sys:/host/sys:ro,rslave
      - /:/rootfs:ro,rslave
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - default
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:rslave
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
  frontend:
    image: ${DOCKER_REGISTRY:-tristandatascience}/${DOCKER_REPOSITORY:-aussie_weather_flow}:frontend-${IMAGE_TAG:-0.2}
    volumes:
      - ./frontend:/app
    ports:
      - '8501:8501'
    command: ['streamlit', 'run', 'app.py', '--server.port=8501', '--server.address=0.0.0.0']
    depends_on:
      - fastapi
volumes:
  postgres-db-volume-airflow:
    driver: local
  postgres-db-volume-mlflow:
    driver: local
  mlflow-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
configs:
  prometheus_config:
    file: ./prometheus/prometheus.yml