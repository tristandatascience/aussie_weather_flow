name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERSION: '0.3'
  DOCKERHUB_REPOSITORY: 'mlops-meteo'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ga.txt
          
      - name: Run Unit Tests
        run: |
          pytest plugins/tests --maxfail=5 --disable-warnings

  build-test-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Test Images
        run: |
          # Définir les images et leurs chemins
          declare -A IMAGE_PATHS=(
            ["mlops-meteo-airflow-base"]="./dockerfiles/airflow"
            ["mlops-meteo-fastapi"]="./dockerfiles/api"
            ["mlops-meteo-mlflow-webserver"]="./dockerfiles/mlflow"
            ["mlops-meteo-frontend"]="./dockerfiles/frontend"
          )
          
          # Construction et test de chaque image
          for IMAGE in "${!IMAGE_PATHS[@]}"; do
            BUILD_PATH="${IMAGE_PATHS[$IMAGE]}"
            echo "Building $IMAGE from $BUILD_PATH..."
            
            # Build de l'image
            docker build -t "$IMAGE" "$BUILD_PATH"
            
            # Tests spécifiques selon l'image
            case "$IMAGE" in
              "mlops-meteo-airflow-base")
                docker run "$IMAGE" pytest /opt/airflow/plugins/tests --maxfail=5
                ;;
              "mlops-meteo-fastapi")
                docker run "$IMAGE" pytest /app/tests --maxfail=5
                ;;
            esac
          done

      - name: Tag and Push Images
        run: |
          for IMAGE in mlops-meteo-airflow-base mlops-meteo-fastapi mlops-meteo-mlflow-webserver mlops-meteo-frontend; do
            # Récupérer l'ID de l'image
            IMAGE_ID=$(docker images "$IMAGE" --format "{{.ID}}" | head -n 1)
            
            if [ -n "$IMAGE_ID" ]; then
              # Extraire le nom sans le préfixe
              IMAGE_NAME="${IMAGE##mlops-meteo-}"
              NEW_IMAGE="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:${IMAGE_NAME}-${{ env.VERSION }}"
              
              # Tag et push
              docker tag "$IMAGE_ID" "$NEW_IMAGE"
              docker push "$NEW_IMAGE"
              
              echo "Pushed $NEW_IMAGE"
            fi
          done